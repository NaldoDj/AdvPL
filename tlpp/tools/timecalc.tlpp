#include "totvs.ch"

//------------------------------------------------------------------------------------------------
    /*/
        class:timeCalc
        Autor:Marinaldo de Jesus [BlackTDN:(http://www.blacktdn.com.br/)]
        Data:23/12/2013
        Descricao:Calculo de Horas
    /*/
//------------------------------------------------------------------------------------------------
class timeCalc
    static method HMSToTime(nHours as numeric,nMinuts as numeric,nSeconds as numeric) as character
    static method SecsToHMS(nSecsToHMS as numeric,nHours as numeric,nMinuts as numeric,nSeconds as numeric,cRet as character) as character
    static method SecsToTime(nSecs as numeric) as character
    static method TimeToSecs(cTime as character) as numeric
    static method SecsToHrs(nSeconds as numeric) as numeric
    static method HrsToSecs(nHours as numeric) as numeric
    static method SecsToMin(nSeconds as numeric) as numeric
    static method MinToSecs(nMinuts as numeric) as numeric
    static method IncTime(cTime as character,nIncHours as numeric,nIncMinuts as numeric,nIncSeconds as numeric) as character
    static method DecTime(cTime as character,nDecHours as numeric,nDecMinuts as numeric,nDecSeconds as numeric) as character
    static method Time2NextDay(cTime as character,dDate as date) as array
    static method ExtractTime(cTime as character,nHours as numeric,nMinutes as numeric,nSeconds as numeric,cRet as character) as numeric
    static method AverageTime(cTime as character,nDividendo as numeric,lMiliSecs as logical) as character
end class

static method HMSToTime(nHours,nMinuts,nSeconds) class timeCalc

    local cTime as character

    DEFAULT nHours:=0
    DEFAULT nMinuts:=0
    DEFAULT nSeconds:=0

    cTime:=AllTrim(Str(nHours))
    cTime:=StrZero(Val(cTime),Max(Len(cTime),2))
    cTime+=":"
    cTime+=StrZero(Val(AllTrim(Str(nMinuts))),2)
    cTime+=":"
    cTime+=StrZero(Val(AllTrim(Str(nSeconds))),2)

    return(cTime)

static method SecsToHMS(nSecsToHMS,nHours,nMinuts,nSeconds,cRet) class timeCalc

    local nRet  as numeric
    
    nRet:=0

    DEFAULT nSecsToHMS:=0
    DEFAULT cRet:="H"

    nHours:=timeCalc():SecsToHrs(nSecsToHMS)
    nMinuts:=timeCalc():SecsToMin(nSecsToHMS)
    nSeconds:=(timeCalc():HrsToSecs(nHours)+timeCalc():MinToSecs(nMinuts))
    nSeconds:=(nSecsToHMS-nSeconds)
    nSeconds:=Int(nSeconds)
    nSeconds:=Mod(nSeconds,60)

    if (cRet$"Hh")
        nRet:=nHours
    elseif (cRet$"Mm")
        nRet:=nMinuts
    elseif (cRet$"Ss")
        nRet:=nSeconds
    endif

    return(nRet)

static method SecsToTime(nSecs) class timeCalc
    
    local cTime     as character
    
    local nHours    as numeric
    local nMinuts   as numeric
    local nSeconds  as numeric
    
    timeCalc():SecsToHMS(nSecs,@nHours,@nMinuts,@nSeconds)

    cTime:=timeCalc():HMSToTime(nHours,nMinuts,nSeconds)

    return(cTime)

static method TimeToSecs(cTime) class timeCalc

    local nHours    as numeric
    local nMinuts   as numeric
    local nSeconds  as numeric

    DEFAULT cTime:="00:00:00"

    timeCalc():ExtractTime(cTime,@nHours,@nMinuts,@nSeconds)

    nMinuts+=__Hrs2Min(nHours)
    nSeconds+=(nMinuts*60)

    return(nSeconds)

static method SecsToHrs(nSeconds) class timeCalc
    local nHours as numeric
    nHours:=(nSeconds/3600)
    nHours:=Int(nHours)
    return(nHours)

static method HrsToSecs(nHours) class timeCalc
    local nSeconds as numeric
    nSeconds:=(nHours*3600)
    return(nSeconds)

static method SecsToMin(nSeconds) class timeCalc
    local nMinuts as numeric
    nMinuts:=(nSeconds/60)
    nMinuts:=Int(nMinuts)
    nMinuts:=Mod(nMinuts,60)
    return(nMinuts)

static method MinToSecs(nMinuts) class timeCalc
    local nSeconds as numeric
    nSeconds:=(nMinuts*60)
    return(nSeconds)

static method IncTime(cTime,nIncHours,nIncMinuts,nIncSeconds) class timeCalc

    local nSeconds  as numeric
    local nMinuts   as numeric
    local nHours    as numeric

    DEFAULT nIncHours:=0
    DEFAULT nIncMinuts:=0
    DEFAULT nIncSeconds:=0

    timeCalc():ExtractTime(cTime,@nHours,@nMinuts,@nSeconds)

    nHours+=nIncHours
    nMinuts+=nIncMinuts
    nSeconds+=nIncSeconds
    nSeconds:=(timeCalc():HrsToSecs(nHours)+timeCalc():MinToSecs(nMinuts)+nSeconds)

    return(timeCalc():SecsToTime(nSeconds))

static method DecTime(cTime,nDecHours,nDecMinuts,nDecSeconds) class timeCalc

    local cTime     as character
    
    local nSeconds  as numeric
    local nMinuts   as numeric
    local nHours    as numeric

    DEFAULT nDecHours:=0
    DEFAULT nDecMinuts:=0
    DEFAULT nDecSeconds:=0

    timeCalc():ExtractTime(cTime,@nHours,@nMinuts,@nSeconds)

    nHours-=nDecHours
    nMinuts-=nDecMinuts
    nSeconds-=nDecSeconds
    nSeconds:=(timeCalc():HrsToSecs(nHours)+timeCalc():MinToSecs(nMinuts)+nSeconds)

    cTime:=timeCalc():SecsToTime(nSeconds)

    return(cTime)

static method Time2NextDay(cTime,dDate) class timeCalc
    local aNextDay  as array
    while (Val(cTime)>=24)
        cTime:=timeCalc():DecTime(cTime,24)
        ++dDate
    end while
    aNextDay:={cTime,dDate}
    return(aNextDay)

static method ExtractTime(cTime,nHours,nMinutes,nSeconds,cRet) class timeCalc

    local nRet  as numeric

    local nAT   as numeric
    
    nRet:=0

    DEFAULT cTime:="00:00:00"
    DEFAULT cRet:="H"

    nAT:=AT(":",cTime)

    if (nAT==0)
        nHours:=Val(cTime)
        nMinutes:=0
        nSeconds:=0
    else
        nHours:=Val(SubStr(cTime,1,nAT-1))
        cTime:=SubStr(cTime,nAT+1)
        nAT:=(At(":",cTime))
        if (nAT==0)
            nMinutes:=Val(cTime)
            nSeconds:=0
        else
            nMinutes:=Val(SubStr(cTime,1,nAT-1))
            nSeconds:=Val(SubStr(cTime,nAT+1))
        endif
    endif

    if (cRet$"Hh")
        nRet:=nHours
    elseif (cRet$"Mm")
        nRet:=nMinutes
    elseif (cRet$"Ss")
        nRet:=nSeconds
    endif

    return(nRet)

static method AverageTime(cTime,nDividendo,lMiliSecs) class timeCalc

    local cAverageTime  as character

    local nSeconds      as numeric
    local nAverageTime  as numeric
    local nMiliSecs     as numeric
    
    cAverageTime:="00:00:00:000"

    DEFAULT nDividendo:=0

    if (nDividendo>0)

        nSeconds:=timeCalc():TimeToSecs(cTime)
        nSeconds:=(nSeconds/nDividendo)
        nAverageTime:=Int(nSeconds)

        nMiliSecs:=(nSeconds-nAverageTime)
        nMiliSecs*=1000
        nMiliSecs:=Int(nMiliSecs)

        cAverageTime:=timeCalc():SecsToTime(nAverageTime)

    endif

    DEFAULT lMiliSecs:=.T.
    if (lMiliSecs)
        DEFAULT nMiliSecs:=0
         cAverageTime+=(":"+StrZero(nMiliSecs,IF(nMiliSecs>999,4,3)))
    endif

    return(cAverageTime)

//------------------------------------------------------------------------------------------------
    /*/
        class:timeRemaining
        Autor:Marinaldo de Jesus [BlackTDN:(http://www.blacktdn.com.br/)]
        Data:23/12/2013
        Descricao:Calculo de Tempo Remanescente
        Sintaxe:timeRemaining():New()->Objeto do Tipo Remaining
    /*/
//------------------------------------------------------------------------------------------------
class timeRemaining from timeCalc

    public data cAverageTime
    public data cEndTime
    public data cStartTime
    public data cTimeDiff
    public data cTRemaining
    public data dEndTime
    public data dStartTime
    public data nProgress
    public data nSRemaining
    public data nTotal

    //-------------------------------------------------------------------
        // EXPORTED:Instancia um novo objeto
    //-------------------------------------------------------------------
    public method New(nTotal) CONSTRUCTOR

    //-------------------------------------------------------------------
        // EXPORTED:Retorna o Nome da classe
    //-------------------------------------------------------------------
    public method className()

    //-------------------------------------------------------------------
        // EXPORTED:Seta novo Total para Calcule()
    //-------------------------------------------------------------------
    public method SetRemaining(nTotal)

    //-------------------------------------------------------------------
        // EXPORTED:Para Obter os Tempos utilize o Metodo Calcule
    //-------------------------------------------------------------------
    public method Calcule(lProgress)

    //-------------------------------------------------------------------
        // EXPORTED:Retorna os Valores das Propriedades
    //-------------------------------------------------------------------
    public method GetcAverageTime()
    public method GetcEndTime()
    public method GetcStartTime()
    public method GetcTimeDiff()
    public method GetcTRemaining()
    public method GetdEndTime()
    public method GetdStartTime()
    public method GetnProgress()
    public method GetnSRemaining()
    public method GetnTotal()

Endclass

method New(nTotal) class timeRemaining
    self:SetRemaining(nTotal)
    return(self)

method className() class timeRemaining
    return("timeRemaining")

method SetRemaining(nTotal) class timeRemaining
    DEFAULT nTotal:=1
    self:cAverageTime:="00:00:00:000"
    self:cEndTime:="00:00:00"
    self:cStartTime:=Time()
    self:cTimeDiff:="00:00:00"
    self:cTRemaining:="00:00:00"
    self:dEndTime:=CToD("//")
    self:dStartTime:=Date()
    self:nProgress:=0
    self:nSRemaining:=0
    self:nTotal:=nTotal
    return(self)

method Calcule(lProgress) class timeRemaining

    local aEndTime      as array

    local cTime         as character
    local dDate         as character

    local nIncTime      as numeric

    local nTime         as numeric
    local nTimeEnd      as numeric
    local nTimeDiff     as numeric
    local nStartTime    as numeric

    begin sequence

        cTime:=Time()
        dDate:=Date()

        nIncTime:=0

        if (.NOT.(dDate==self:dStartTime))
            nIncTime:=abs(dDate-self:dStartTime)
            nIncTime*=24
        endif

        nTime:=(timeCalc():TimeToSecs(cTime)+IF(nIncTime>0,timeCalc():HrsToSecs(nIncTime),0))
        nStartTime:=timeCalc():TimeToSecs(self:cStartTime)

        nTimeDiff:=abs(nTime-nStartTime)
        self:cTimeDiff:=timeCalc():SecsToTime(nTimeDiff)
        self:cTRemaining:=timeCalc():SecsToTime(abs(nTimeDiff-nStartTime))
        self:nSRemaining:=nTimeDiff

        DEFAULT lProgress:=.T.
        if (lProgress)
            ++self:nProgress
        endif

        self:cAverageTime:=timeCalc():AverageTime(self:cTimeDiff,self:nProgress,.T.)

        if (self:nTotal<self:nProgress)
            nTimeEnd:=self:nTotal
            self:nTotal:=self:nProgress
            self:nProgress:=nTimeEnd
        endif
        nTimeEnd:=(((self:nTotal-self:nProgress)*self:nSRemaining)/self:nProgress)
        self:cEndTime:=timeCalc():SecsToTime(nTimeEnd)
        self:cEndTime:=timeCalc():IncTime(cTime,NIL,NIL,timeCalc():TimeToSecs(self:cEndTime))
        aEndTime:=timeCalc():Time2NextDay(self:cEndTime,dDate)
        self:cEndTime:=aEndTime[1]
        self:dEndTime:=aEndTime[2]

    end sequence

    return(self)

method GetcAverageTime() class timeRemaining
    return(self:cAverageTime)

method GetcEndTime() class timeRemaining
    return(self:cEndTime)

method GetcStartTime() class timeRemaining
    return(self:cStartTime)

method GetcTimeDiff() class timeRemaining
    return(self:cTimeDiff)

method GetcTRemaining() class timeRemaining
    return(self:cTRemaining)

method GetdEndTime() class timeRemaining
    return(self:dEndTime)

method GetdStartTime() class timeRemaining
    return(self:dStartTime)

method GetnProgress() class timeRemaining
    return(self:nProgress)

method GetnSRemaining() class timeRemaining
    return(self:nSRemaining)

method GetnTotal() class timeRemaining
    return(self:nTotal)
